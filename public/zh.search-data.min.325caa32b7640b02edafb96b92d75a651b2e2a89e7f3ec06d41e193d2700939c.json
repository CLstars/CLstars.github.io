[{"id":0,"href":"/docs/daily/","title":"Daily","section":"Docs","content":"Dec 27, 2023 摸鱼🐟\u0026hellip; "},{"id":1,"href":"/posts/%E5%BC%80%E6%BA%90/","title":"从Github项目讨论中学到的开源知识","section":"博客","content":"最近围观了V2EX上关于 immersive translate项目是否开源的讨论及 作者的回应， 发现社区对开源的理解，对GitHub star的理解也不一致。 喜欢该项目作者在博客的回应，列举了质疑、回应和行动，很像response letter，方便吃瓜。以下记录吃瓜过程中学到的几点。\n开源 # Source available ≠ Open source # 首先是wiki上关于 开源的定义：\nOpen source is source code that is made freely available for possible modification and redistribution.\n可以看到，开源的标识不在于代码可用，而在于license\nOpen Source License # 大体可以分为严格派（图左下）和宽松派（图右下），可参考下图，图源自 OpenSource License Explains Github为选择license专门做了一个网站 Choose a License来提供说明，阮一峰博客上有相关教程 如何选择开源许可证？，知乎上也有类似的帖子 如何为自己的 Github 项目选择开源许可证？。 如果拥有开源协议的项目接受过pull request，且项目拥有者与贡献者之前没有签署过CLA协议，那么项目拥有者只能对自己写的部分变更协议。应对做法可以是在合并pull request之前，用 这个Github Action要求贡献者签署CLA协议。这一点摘自 沉浸式翻译项目作者在博客的回应。 如何在Github项目建立之初和项目建立后添加license，可参考教程 如何保障你辛苦寫的程式碼？ 社区关于开源的讨论 # 为什么国内开源氛围这么差？大厂都在卷自己的轮子？ - 知乎 科技爱好者周刊（第 263 期）：开源软件如何赚钱？ - 阮一峰的网络日志 “客服模式” 科技爱好者周刊（第 264 期）：Elasticsearch 的启示 - 阮一峰的网络日志 “开源核心模式” 在Github上的闭源项目 # 项目上传到Github不意味着项目开源，Github上也有优秀的闭源项目，比如 obsidian和 clash for windows，可以只使用GitHub的release功能。但是，为了避免被误认为开源，最好在构建项目时注意以下几点：\n项目名称加上releases后缀，如obsidian-releases。 不把发布build和doc的功能放在同一个项目中，可参考现在 immersive translate项目和其 官网的做法。 项目README尽量简单，尽量不要有makefile文件。 文档内指向的Github链接命名为Releases。 如果旧项目闭源，新项目开源，最好在两个项目README开头说明。 "},{"id":2,"href":"/posts/Chrome%E6%9C%80%E5%A4%A7%E5%8C%96%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%B1%E6%95%88/","title":"Chrome最大化快捷键失效","section":"博客","content":"环境：MacOS\n现象：Google Chrome浏览器原来的快捷键是⌘ + Ctrl + f，快捷键不起作用\n原因：Chrome最大化快捷键变成了fn + F\n做法：\n打开系统设置-键盘-键盘快捷键-App快捷键-加号（+） 应用程序选择Google Chrome 菜单标题：进入全屏幕 （注：系统语言为英文则输入Enter Full Screen） 键盘快捷键：⌘ + Ctrl + f 点击加号（+）再添加一次 应用程序选择Google Chrome 菜单标题：退出全屏幕 （注：系统语言为英文则输入Exit Full Screen） 键盘快捷键：⌘ + Ctrl + f "},{"id":3,"href":"/docs/about/","title":"About","section":"Docs","content":"Read More,\nThink More,\nWrite More.\n"}]